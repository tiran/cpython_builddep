---
name: CI

on:
  #push:
  #  branches: ["main"]
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened, closed]
  repository_dispatch:
    types: rebuild
  workflow_dispatch:
    inputs:
      git-ref:
        required: false

jobs:
  syntaxcheck:
    name: "Check syntax"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
    steps:
      - name: "checkout"
        uses: "actions/checkout@v2"
      - name: "install dash and shellcheck"
        run: |
           set -e
           sudo apt update
           sudo apt install -y bash dash shellcheck
      - name: "check with dash"
        run: dash -n builddep.sh tests/entry.sh
      - name: "check with bash"
        run: bash -n builddep.sh tests/entry.sh
      - name: "check with shellcheck"
        run: shellcheck -x builddep.sh tests/entry.sh

  distros:
    name: "${{ matrix.distro }} on ${{ matrix.platform }}"
    runs-on: "ubuntu-latest"
    needs: syntaxcheck
    strategy:
      fail-fast: false
      matrix:
        distro: [
          "alpine-3.12", "alpine-3.13",
          "archlinux",
          "centos-7", "centos-8",
          "debian-bullseye", "debian-buster", "debian-testing",
          "fedora-33", "fedora-34", "fedora-35",
          # "gentoo--stage3",
          # OpenSUSE container works locally but hangs on GHA.
          # "opensuse--tumbleweed",
          # 18.04, 20.04, 21.04, 21.10
          "ubuntu-bionic", "ubuntu-focal", "ubuntu-hirsute", "ubuntu-impish",
        ]
        platform: [
          "linux/amd64"
        ]
        exclude:
          # ArchLinux does not offer arm64 and s390x containers
          - distro: "archlinux"
            platform: "linux/arm64"
          - distro: "archlinux"
            platform: "linux/s390x"
          # CentOS does not offer s390x containers
          - distro: "centos-7"
            platform: "linux/s390x"
          - distro: "centos-8"
            platform: "linux/s390x"
        include:
          # speedup: only build emulated archs for some distros
          # Alpine
          - distro: "alpine-3.13"
            platform: "linux/arm64"
          - distro: "alpine-3.13"
            platform: "linux/s390x"
          # Fedora
          - distro: "fedora-35"
            platform: "linux/arm64"
          - distro: "fedora-35"
            platform: "linux/ppc64le"
          - distro: "fedora-35"
            platform: "linux/s390x"
          # Debian
          - distro: "debian-bullseye"
            platform: "linux/386"
          - distro: "debian-bullseye"
            platform: "linux/arm64"
          - distro: "debian-bullseye"
            platform: "linux/ppc64le"
          - distro: "debian-bullseye"
            platform: "linux/mips64le"
          - distro: "debian-bullseye"
            platform: "linux/s390x"
    env:
      IMAGE_TAG: "quay.io/tiran/cpythonbuild:${{ matrix.distro }}"
      MATRIX_DISTRO: ${{ matrix.distro }}
      EXPORT_TAR: "/tmp/tiran-cpythonbuild-${{ matrix.distro }}.tar"
    steps:
      - name: "checkout"
        uses: "actions/checkout@v2"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@master
        if: ${{ matrix.platform }} != 'linux/amd64'
        with:
          platforms: ${{ matrix.platform }}
      - name: set env
        run: |
          echo "IMAGE_CREATED=$(date --rfc-3339=seconds --utc)" >> $GITHUB_ENV
          echo "IMAGE_DISTRO=$(echo $MATRIX_DISTRO | sed s,--,/,g | sed s,-,:,g)"
      - name: "build container image"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: tests/Dockerfile.${{ matrix.distro }}
          platforms: ${{ matrix.platform }}
          push: false
          load: true
          tags: ${{ env.IMAGE_TAG }}
          labels: |
            org.opencontainers.image.created=${{ env.IMAGE_CREATED }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: "checkout CPython"
        uses: "actions/checkout@v2"
        with:
          repository: python/cpython
          path: cpython
          ref: main
      - name: Cache ccache
        uses: actions/cache@v2
        with:
          path: ${GITHUB_WORKSPACE}/cpython/builddep/.ccache
          key: ${{ matrix.distro }}-${{ matrix.platform }}
      - name: "build CPython with ${{ env.IMAGE_TAG }} on ${{ matrix.platform }}"
        run: docker run --platform ${{ matrix.platform }} --rm -v ${GITHUB_WORKSPACE}/cpython:/cpython ${{ env.IMAGE_TAG }}
      #- name: "save container to tar ball"
      #  run: docker save -o ${{ env.EXPORT_TAR }} ${{ env.IMAGE_TAG }}
      #- name: "upload container artifact"
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: image
      #    path: ${{ env.EXPORT_TAR }}
      #    if-no-files-found: error
      - name: Login to quay.io Container Registry
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: docker/login-action@v1 
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_LOGIN }}
          password: ${{ secrets.QUAY_TOKEN }}
      - name: Upload container image
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: docker/build-push-action@v2
        with:
          context: .
          file: tests/Dockerfile.${{ matrix.distro }}
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.IMAGE_TAG }}

  # freebsd:
  #   runs-on: macos-10.15
  #   name: FreeBSD
  #   strategy:
  #     fail-fast: false
  #   steps:
  #     - name: checkout
  #       uses: "actions/checkout@v2"
  #     - name: "checkout CPython"
  #       uses: "actions/checkout@v2"
  #       with:
  #         repository: python/cpython
  #         path: cpython
  #         ref: main
  #     - name: Run test in FreeBSD VM
  #       uses: "vmactions/freebsd-vm@v0.1.5"
  #       with:
  #         usesh: true
  #         run: |
  #           set -e
  #           # pkg search -g \*
  #           ./builddep.sh --debug
  #           cd cpython
  #           ./configure
  #           make -j4

  macos:
    name: "macOS brew"
    runs-on: macos-10.15
    needs: syntaxcheck
    strategy:
      fail-fast: false
    steps:
      - name: checkout
        uses: "actions/checkout@v2"
      - name: run builddep.sh
        run: |
          set -e
          ./builddep.sh --debug
      - name: "checkout CPython"
        uses: "actions/checkout@v2"
        with:
          repository: python/cpython
          path: cpython
          ref: main
      - name: build CPython
        working-directory: ${{ github.workspace }}/cpython
        run: |
          set -e
          ./configure --with-openssl=$(brew --prefix openssl@1.1)
          make -j4
