---
name: CI

on:
  #push:
  #  branches: ["main"]
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened, closed]
  repository_dispatch:
    types: rebuild
  workflow_dispatch:
    inputs:
      git-ref:
        required: false

jobs:
  syntaxcheck:
    name: "Check syntax"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
    steps:
      - name: "checkout"
        uses: "actions/checkout@v2"
      - name: "install dash and shellcheck"
        run: |
           set -e
           sudo apt update
           sudo apt install -y bash dash shellcheck
      - name: "check with dash"
        run: dash -n builddep.sh tests/entry.sh tests/activate
      - name: "check with bash"
        run: bash -n builddep.sh tests/entry.sh tests/activate
      - name: "check with shellcheck"
        run: shellcheck -x builddep.sh tests/entry.sh

  distros:
    name: "${{ matrix.distro }}"
    runs-on: "ubuntu-latest"
    needs: syntaxcheck
    strategy:
      fail-fast: true
      matrix:
        include:
          # speedup: only build emulated archs for some distros
          # Alpine (test arm64)
          - distro: "alpine-3.13"
            platforms: "linux/amd64,linux/arm64,linux/s390x"
            #buildon: "linux/amd64,linux/arm64"
            buildon: "linux/amd64"
          - distro: "alpine-3.15"
            platforms: "linux/amd64,linux/arm64,linux/s390x"
            #buildon: "linux/amd64,linux/arm64"
            buildon: "linux/amd64"

          # ArchLinux does not offer arm64 and s390x containers
          - distro: "archlinux"
            platforms: "linux/amd64"
            buildon: "linux/amd64"

          # CentOS does not offer s390x containers
          - distro: "centos-7"
            platforms: "linux/amd64,linux/arm64"
            buildon: "linux/amd64"
          - distro: "centos-8"
            platforms: "linux/amd64,linux/arm64,linux/ppc64le"
            buildon: "linux/amd64"

          - distro: "debian-buster"
            platforms: "linux/amd64,linux/arm64,linux/s390x,linux/386"
            #buildon: "linux/amd64,linux/386"
            buildon: "linux/amd64"
          - distro: "debian-bullseye"
            platforms: "linux/amd64,linux/arm64,linux/s390x,linux/mips64le"
            #buildon: "linux/amd64,linux/mips64le"
            buildon: "linux/amd64"
          - distro: "debian-testing"
            platforms: "linux/amd64,linux/arm64,linux/s390x"
            buildon: "linux/amd64"

          # Fedora package installation on arm64 is slow
          - distro: "fedora-33"
            platforms: "linux/amd64,linux/s390x"
            buildon: "linux/amd64"
          - distro: "fedora-34"
            platforms: "linux/amd64,linux/s390x"
            #buildon: "linux/amd64,linux/s390x"
            buildon: "linux/amd64"
          - distro: "fedora-35"
            platforms: "linux/amd64,linux/s390x,linux/ppc64le"
            #buildon: "linux/amd64,linux/ppc64le"
            buildon: "linux/amd64"
          - distro: "ubuntu-bionic"
            platforms: "linux/amd64,linux/arm64,linux/s390x"
            buildon: "linux/amd64"
          - distro: "ubuntu-focal"
            platforms: "linux/amd64,linux/arm64,linux/s390x"
            buildon: "linux/amd64"
          - distro: "ubuntu-hirsute"
            platforms: "linux/amd64,linux/arm64,linux/s390x"
            buildon: "linux/amd64"
          - distro: "ubuntu-impish"
            platforms: "linux/amd64,linux/arm64,linux/s390x"
            buildon: "linux/amd64"
    steps:
      - name: Set environment
        run: |
          set -e
          echo "IMAGE_TAG=quay.io/tiran/cpythonbuild:${{ matrix.distro }}" >> $GITHUB_ENV
          echo "CCACHE_DIR=$GITHUB_WORKSPACE/cpython/builddep/.ccache"  >> $GITHUB_ENV
          echo "CPYTHON_DIR=$GITHUB_WORKSPACE/cpython" >> $GITHUB_ENV
          echo "MATRIX_DISTRO=${{ matrix.distro }}" >> $GITHUB_ENV
          echo "IMAGE_CREATED=$(date --rfc-3339=seconds --utc)" >> $GITHUB_ENV
          echo "IMAGE_DISTRO=$(echo $MATRIX_DISTRO | sed s,--,/,g | sed s,-,:,g)" >> $GITHUB_ENV
          echo "CACHE_PREFIX=$(echo ${{ matrix.distro }}-${{ matrix.buildon }} | tr ',' '-')"  >> $GITHUB_ENV
      - name: "checkout"
        uses: "actions/checkout@v2"
      - name: Install ccache
        run: sudo apt install -y ccache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Set up Docker QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: ${{ matrix.platforms }}
      - name: "build container image"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: tests/Dockerfile.${{ matrix.distro }}
          platforms: ${{ matrix.platforms }}
          push: false
          load: false
          tags: ${{ env.IMAGE_TAG }}
          labels: |
            org.opencontainers.image.created=${{ env.IMAGE_CREATED }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: "checkout CPython"
        uses: "actions/checkout@v2"
        with:
          repository: python/cpython
          path: ${{ env.CPYTHON_DIR }}
          ref: main
      - name: Get commit hash from CPython checkout
        run: echo "CPYTHON_SHA=$(git --git-dir=${{ env.CPYTHON_DIR }}/.git rev-parse HEAD)" >> $GITHUB_ENV
      - name: Cache ccache dir
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_PREFIX }}-${{ env.CPYTHON_SHA }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-
            ${{ matrix.distro }}-
      - name: ccache stats before build
        run: ccache -s
      - name: "build CPython with ${{ env.IMAGE_TAG }} on ${{ matrix.buildon }}"
        run: |
          set -ex
          # qemu builds are suuuuuper slow
          # docker exporter does not currently support exporting manifest lists
          for platform in $(echo "${{ matrix.buildon }}" | tr ',' '\n'); do
              docker buildx build --load --platform $platform --tag ${{ env.IMAGE_TAG }} --file tests/Dockerfile.${{ matrix.distro }} .
              docker run --platform $platform --rm -v ${{ env.CPYTHON_DIR }}:/cpython ${{ env.IMAGE_TAG }}
          done
      - name: ccache stats after build
        run: ccache -s
      - name: Login to quay.io Container Registry
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: docker/login-action@v1 
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_LOGIN }}
          password: ${{ secrets.QUAY_TOKEN }}
      - name: Upload container image
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: docker/build-push-action@v2
        with:
          context: .
          file: tests/Dockerfile.${{ matrix.distro }}
          platforms: ${{ matrix.platforms }}
          push: true
          tags: ${{ env.IMAGE_TAG }}

  # freebsd:
  #   runs-on: macos-10.15
  #   name: FreeBSD
  #   strategy:
  #     fail-fast: false
  #   steps:
  #     - name: checkout
  #       uses: "actions/checkout@v2"
  #     - name: "checkout CPython"
  #       uses: "actions/checkout@v2"
  #       with:
  #         repository: python/cpython
  #         path: cpython
  #         ref: main
  #     - name: Run test in FreeBSD VM
  #       uses: "vmactions/freebsd-vm@v0.1.5"
  #       with:
  #         usesh: true
  #         run: |
  #           set -e
  #           # pkg search -g \*
  #           ./builddep.sh --debug
  #           cd cpython
  #           ./configure
  #           make -j4


  crossbuild:
    name: "Cross build containers ${{ matrix.image_tag }}"
    runs-on: "ubuntu-latest"
    needs: distros
    strategy:
      fail-fast: true
      matrix:
        include:
          - dockerfile: wasm/Dockerfile.ubuntu-impish-wasm
            image_tag: quay.io/tiran/cpythonbuild:ubuntu-impish-wasm
          - dockerfile: wasm/Dockerfile.emsdk3
            image_tag: quay.io/tiran/cpythonbuild:emsdk3
    steps:
      - name: Set environment
        run: |
          set -e
          echo "IMAGE_CREATED=$(date --rfc-3339=seconds --utc)" >> $GITHUB_ENV
      - name: "checkout"
        uses: "actions/checkout@v2"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: "build container image"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: false
          load: false
          tags: ${{ matrix.image_tag }}
          labels: |
            org.opencontainers.image.created=${{ env.IMAGE_CREATED }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Login to quay.io Container Registry
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: docker/login-action@v1 
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_LOGIN }}
          password: ${{ secrets.QUAY_TOKEN }}
      - name: Upload container image
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ matrix.image_tag }}

  macos:
    name: "macOS brew"
    runs-on: macos-10.15
    needs: syntaxcheck
    strategy:
      fail-fast: false
    steps:
      - name: checkout
        uses: "actions/checkout@v2"
      - name: run builddep.sh
        run: |
          set -e
          ./builddep.sh --debug
      - name: "checkout CPython"
        uses: "actions/checkout@v2"
        with:
          repository: python/cpython
          path: cpython
          ref: main
      - name: build CPython
        working-directory: ${{ github.workspace }}/cpython
        run: |
          set -e
          ./configure --with-openssl=$(brew --prefix openssl@1.1)
          make -j4
